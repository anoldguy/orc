#!/usr/bin/env bash
# Usage: orc web
# Summary: Configures the web container
# Help: Sets up the web docker container with the provided ssl cert.

source $_ORC_ROOT/share/orc/common.sh

# Provide orc completions
if [ "$1" == "--complete" ]; then
  echo "build rebuild console logs restart start regenerate-cert install uninstall"
  exit 0
fi

build_image() {
  # Ensure we've got the CA configured
  orc-ssl create

  cp $SHARE_DIR/nginx/nginx.conf $TMP_DIR/
  cp $SHARE_DIR/nginx/Dockerfile $TMP_DIR/
  cp $SHARE_DIR/nginx/pow.lua    $TMP_DIR/

  cd $TMP_DIR
  $DOCKER build -t orc-web .
}

run_images() {
  $DOCKER run --name orc-web -d $(generate_volume_options) --net=host orc-web
}

stop_containers() {
  $DOCKER stop orc-web
}

rm_containers() {
  $DOCKER rm orc-web
}

rm_image() {
  $DOCKER rmi orc-web
}

generate_volume_options() {
  echo -n "-v $ORC_APPS:/pow "
}


command="$1"
case "$command" in
"build" | "rebuild" )
  build_image
  ;;
"console" )
  $DOCKER run -it --rm $(generate_volume_options) orc-web /bin/sh
  ;;
"restart" | "start" )
  silently_log stop_containers
  silently_log rm_containers
  silently_log run_images
  ;;
"logs" )
  # Let's get tricky and allow them to use 'logs -f'
  $DOCKER "$@" orc-web
  ;;
"reset" | "regenerate-cert" )
  silently_log stop_containers
  silently_log rm_containers
  silently_log rm_image
  silently_log build_image
  silently_log run_images
  ;;
"remove" )
  silently_log stop_containers
  silently_log rm_containers
  silently_log rm_image
  ;;
* )
  silently_log $DOCKER stop orc-web
  silently_log $DOCKER rm orc-web
  silently_log build_image
  silently_log run_images
  ;;
esac
