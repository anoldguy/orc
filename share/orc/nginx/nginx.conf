
user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
  worker_connections  1024;
}


http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /var/log/nginx/access.log  main;

  sendfile        on;

  keepalive_timeout  65;

  gzip  on;

  # This map allows us to refer to $static_content_root in our location blocks,
  # and get an appropriate root back based on the "app" portion of the hostname
  # we connect to. The named matches ("app" and "subdir") below will also set
  # variables that are available to us in the path we return. A reasonable
  # convention (used by Rails, for instance) is to have a /public directory
  # inside the project's root, so this is what we are defaulting to here.
  map $host $static_content_root {
    hostnames; # Allows us to use wildcard matching, e.g., *.devel

    # If you want to put some kind of static index.html in this location, it'll
    # display if you access the root of a project that doesn't have a match.
    default /apps;

    # For typical standalone apps living in your project directory
    # *.myapp.local.devel -> /apps/myapp/public
    ~^([^\.]+\.)*(?<app>[^\.]+)\.devel$
      /apps/$app/public;
  }

  # Handle HTTP requests to *.devel
  server {
    listen       80;
    server_name  *.devel;

    location / {
      root   $static_content_root; # Using the map we defined earlier
      try_files $uri $uri/index.html @devel;
    }

    location @devel {
      proxy_set_header  Upgrade           $http_upgrade;
      proxy_set_header  Connection        "upgrade";
      proxy_http_version 1.1;
      proxy_set_header  X-Real-IP         $remote_addr;
      proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header  Host              $http_host;
      proxy_redirect    off;
      # Since passing ports around can be tricky with Docker for Mac, we're
      # going to use a unix socket that the app will write to via mounted
      # directory.  Configure your app server (unicorn or puma?) to listen on
      # a unix socket in the app directory: tmp/app.sock. This is in lieu of
      # using localhost:<port>. The syntax looks wierd, but it's legit:
      # http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass
      proxy_pass        http://unix:/apps/$app/tmp/app.sock:;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
      root   /usr/share/nginx/html;
    }
  }

  # Handle HTTPS requests to *.devel
  server {
    listen       443 ssl http2;
    server_name  *.devel;

    ssl on;
    ssl_certificate     /etc/nginx/ssl/devel.pem;
    ssl_certificate_key /etc/nginx/ssl/devel.key;
    ssl_session_timeout 5m;

    location / {
      root   $static_content_root; # Using the map we defined earlier
      try_files $uri $uri/index.html @devel;
    }

    # Note that this block is slightly different than the non-HTTPS one. If we
    # don't set X-Forwarded-Proto, then if our app tries to force SSL, it will
    # end up in a redirect loop.
    location @devel {
      proxy_set_header  Upgrade           $http_upgrade;
      proxy_set_header  Connection        "upgrade";
      proxy_http_version 1.1;
      proxy_set_header  X-Real-IP         $remote_addr;
      proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header  X-Forwarded-Proto $scheme;
      proxy_set_header  Host              $http_host;
      proxy_redirect    off;
      # Since passing ports around can be tricky with Docker for Mac, we're
      # going to use a unix socket that the app will write to via mounted
      # directory.  Configure your app server (unicorn or puma?) to listen on
      # a unix socket in the app directory: tmp/app.sock. This is in lieu of
      # using localhost:<port>. The syntax looks wierd, but it's legit:
      # http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass
      proxy_pass        http://unix:/apps/$app/tmp/app.sock:;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
      root   /usr/share/nginx/html;
    }
  }
}
